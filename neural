
import numpy as np

def sigmoid(x): return 1 / (1 + np.exp(-x))
def sigmoid_derivative(x): return x * (1 - x)

X = np.array([[0,0], [0,1], [1,0], [1,1]])
y = np.array([[0], [1], [1], [0]])  # XOR

np.random.seed(1)
w1, w2 = np.random.rand(2, 2), np.random.rand(2, 1)

for _ in range(10000):
    l1 = sigmoid(np.dot(X, w1))
    l2 = sigmoid(np.dot(l1, w2))
    
    l2_error = y - l2
    l2_delta = l2_error * sigmoid_derivative(l2)
    
    l1_error = l2_delta.dot(w2.T)
    l1_delta = l1_error * sigmoid_derivative(l1)

    w2 += l1.T.dot(l2_delta)
    w1 += X.T.dot(l1_delta)

print(sigmoid(np.dot(sigmoid(np.dot(X, w1)), w2)))  # Output after training
